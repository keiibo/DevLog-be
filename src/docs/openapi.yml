openapi: 3.0.0
info:
  title: DevLog API
  description: DevLogで使用するAPI
  version: "1.0"
servers:
  - url: http://localhost:4001/
    description: Production server
paths:
  # ユーザー
  /api/user:
    post:
      tags: ["User"]
      summary: user新規作成
      description: userアカウントを新規作成する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - userName
                - password
                - email
              properties:
                userId:
                  type: string
                  description: ユーザーID
                userName:
                  type: string
                  description: ユーザーネーム
                password:
                  type: string
                  description: ハッシュ化前の生パスワード
                email:
                  type: string
                  description: email

      responses:
        "200":
          description: "ユーザー作成成功時"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          description: Internal server error

  # Health Check
  /api/health-check:
    get:
      tags: ["HealthCheck"]
      summary: ヘルスチェック
      description: 正常に動作しているかを確認する.
      responses:
        200:
          description: 正常

  # Project一覧の取得
  /api/project:
    get:
      summary: 全プロジェクトの一覧を取得
      operationId: listProjects
      tags:
        - Project
      responses:
        "200":
          description: プロジェクトの一覧が正常に取得されました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "500":
          description: "サーバー側のエラーによりプロジェクトの一覧を取得できませんでした。"
    post:
      summary: 新規プロジェクトの作成
      operationId: createProject
      tags:
        - Project
      requestBody:
        description: "新規作成するプロジェクトのデータ"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - detail
                - limitDate
              properties:
                name:
                  type: string
                  description: "プロジェクト名"
                detail:
                  type: string
                  description: "プロジェクトの詳細"
                limitDate:
                  type: string
                  format: date
                  description: "プロジェクトの期限日"
      responses:
        201:
          description: "プロジェクトが正常に作成されました。"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        400:
          description: "無効なリクエストです。"
  # PJの詳細取得
  /api/project/{projectId}:
    get:
      summary: 指定されたプロジェクトの詳細が返されます
      operationId: getProject
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          description: 取得したいプロジェクトのID。
          schema:
            type: string
      responses:
        "200":
          description: プロジェクトが返される
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Project not found

  #チケットの新規作成
  /api/tickets:
    post:
      tags: ["Ticket"]
      summary: タスクチケットの新規作成
      description: チケットを新規作成する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
              $ref: "#/components/schemas/TicketCreateRequest"
      responses:
        "200":
          description: "チケット作成成功時"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
    # チケット全件取得
    get:
      tags: ["Ticket"]
      summary: チケット一覧の取得
      description: projectIdに紐づくチケットを取得
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
          description: The project ID to retrieve tickets for.
      responses:
        "200":
          description: Successfully retrieved the tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ticket"
        "404":
          description: No tickets found for the specified project ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "チケットが取得できませんでした"
  /api/tickets/{ticketId}:
    get:
      tags: ["Ticket"]
      summary: ticketIdからチケットの詳細を取得する
      description: ticketIdからチケットの詳細を取得する
      parameters:
        - name: ticketId
          in: path
          required: true
          description: チケットId
          schema:
            type: string
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "400":
          description: チケットIdが無効です
        "500":
          description: Internal server error
    put:
      tags: ["Ticket"]
      summary: チケットの更新
      description: ticketIdからチケットを更新する
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: string
          description: チケットId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketUpdateRequest"
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "400":
          description: チケットIdが無効です
        "500":
          description: Internal server error
    delete:
      tags: ["Ticket"]
      summary: チケットの削除
      description: ticketIdからチケットを削除する
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: string
          description: チケットId
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "400":
          description: チケットIdが無効です
        "500":
          description: Internal server error

components:
  schemas:
    # ユーザー
    User:
      type: object
      required:
        - userName
        - email
        - passwordHash
      properties:
        _id:
          type: string
          format: uuid
          description: ユーザーの一意識別子
          readOnly: true
        userId:
          type: string
          format: uuid
          description: ユーザーの一意識別子（_idと同一）
          readOnly: true
        userName:
          type: string
          description: ユーザーのユーザーネーム
        email:
          type: string
          format: email
          description: ユーザーのメールアドレス
        passwordHash:
          type: string
          description: ユーザーのハッシュ化されたパスワード
        createdAt:
          type: string
          format: date-time
          description: ユーザー作成のタイムスタンプ
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: 最後の更新のタイムスタンプ
          readOnly: true
        lastLogin:
          type: string
          format: date-time
          description: 最後のログインのタイムスタンプ
          readOnly: true
    # プロジェクト
    Project:
      type: object
      properties:
        _id:
          type: string
          description: プロジェクトのユニークなID
        name:
          type: string
          description: プロジェクト名
        detail:
          type: string
          description: プロジェクト詳細
        limitDate:
          type: string
          description: プロジェクトの期限日
    # チケット
    Ticket:
      type: object
      required:
        - _id
        - projectId
        - ticketId
        - detail
        - labelColorType
        - title
        - isDeletable
        - priority
        - status
      properties:
        _id:
          type: number
        projectId:
          type: string
        ticketId:
          type: string
        labelColorType:
          type: string
          enum:
            - white
            - lightBlue
            - blue
            - red
        title:
          type: string
        detail:
          type: string
        isDeletable:
          type: boolean
        limitStartYm:
          type: string
          format: date
          nullable: true
        limitEndYm:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        status:
          type: string
          enum:
            - notStarted
            - underConstruction
            - completed

    TicketCreateRequest:
      type: object
      required:
        - projectId
        - detail
        - labelColorType
        - title
        - isDeletable
        - priority
        - status
      properties:
        projectId:
          type: string
        labelColorType:
          type: string
          enum:
            - white
            - lightBlue
            - blue
            - red
        title:
          type: string
        detail:
          type: string
        isDeletable:
          type: boolean
        limitStartYm:
          type: string
          format: date
          nullable: true
        limitEndYm:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        status:
          type: string
          enum:
            - notStarted
            - underConstruction
            - completed

    TicketUpdateRequest:
      type: object
      required:
        - projectId
        - detail
        - labelColorType
        - title
        - isDeletable
        - priority
        - status
      properties:
        projectId:
          type: string
        labelColorType:
          type: string
          enum:
            - white
            - lightBlue
            - blue
        title:
          type: string
        detail:
          type: string
        isDeletable:
          type: boolean
        limitStartYm:
          type: string
          format: date
          nullable: true
        limitEndYm:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        status:
          type: string
          enum:
            - notStarted
            - underConstruction
            - completed
