openapi: 3.0.0
info:
  title: DevLog API
  description: DevLogで使用するAPI
  version: '1.0'
servers:
  - url: http://localhost:4001/api
    description: Production server
security:
  - Bearer: []

paths:
  # ユーザー
  /login:
    post:
      tags: ['Login']
      summary: ログイン
      description: Emailかパスワードでログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
                - password
              properties:
                identifier:
                  type: string
                  description: email or id
                password:
                  type: string
                  description: パスワード
              example:
                identifier: keibo@example.com
                password: Keita1209
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: The user's unique identifier
                  userName:
                    type: string
                    description: The user's name
                  email:
                    type: string
                    description: The user's email address
                  projectIds:
                    type: array
                    items:
                      type: string
                example:
                  userId: '12345'
                  userName: 'John Doe'
                  email: 'user@example.com'
                  projectIds: ['DVLG', 'DVLG2']
        '401':
          description: Unauthorized - Incorrect password or identifier
        '404':
          description: User not found
        '500':
          description: Server error
  /user:
    post:
      tags: ['User']
      summary: user新規作成
      description: userアカウントを新規作成する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - userName
                - password
                - email
              properties:
                userId:
                  type: string
                  description: ユーザーID
                userName:
                  type: string
                  description: ユーザーネーム
                password:
                  type: string
                  description: ハッシュ化前の生パスワード
                email:
                  type: string
                  description: email
      responses:
        '200':
          description: 'ユーザー作成成功時'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
  /me:
    get:
      tags: ['User']
      summary: user情報取得
      description: user情報を取得する
      responses:
        '200':
          description: 'ログインしているユーザー情報を取得する'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

  # Health Check
  /health-check:
    get:
      tags: ['HealthCheck']
      summary: ヘルスチェック
      description: 正常に動作しているかを確認する.
      responses:
        200:
          description: 正常

  # Project一覧の取得
  /project/all/{userId}:
    get:
      summary: ユーザーに紐づく全プロジェクトの一覧を取得
      operationId: listProjects
      tags:
        - Project
      parameters:
        - name: userId
          in: path
          required: true
          description: ユーザーID
          schema:
            type: string

      responses:
        '200':
          description: プロジェクトの一覧が正常に取得されました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          description: 'サーバー側のエラーによりプロジェクトの一覧を取得できませんでした。'
  /project:
    post:
      summary: 新規プロジェクトの作成
      operationId: createProject
      tags:
        - Project
      requestBody:
        description: '新規作成するプロジェクトのデータ'
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - detail
                - limitDate
                - projectId
                - userId
              properties:
                name:
                  type: string
                  description: 'プロジェクト名'
                detail:
                  type: string
                  description: 'プロジェクトの詳細'
                limitDate:
                  type: string
                  format: date
                  description: 'プロジェクトの期限日'
                projectId:
                  type: string
                  description: 'プロジェクトのID'
                userId:
                  type: string
                  description: 'ユーザーID'
      responses:
        201:
          description: 'プロジェクトが正常に作成されました。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: '無効なリクエストです。'
  # PJの詳細取得
  /project/{projectId}:
    get:
      summary: 指定されたプロジェクトの詳細が返されます
      operationId: getProject
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          description: 取得したいプロジェクトのID。
          schema:
            type: string
      responses:
        '200':
          description: プロジェクトが返される
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
    patch:
      summary: プロジェクトの更新
      description: プロジェクトの更新
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                detail:
                  type: string
      responses:
        '200':
          description: Successfully updated the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
        '403':
          description: Unauthorized to update the project
        '500':
          description: Internal server error
  # 詳細のリンクアイコンの作成
  /detail/linkIcon/{projectId}/{uuid}:
    delete:
      tags:
        - LinkIcon
      operationId: deleteLinkIcon
      summary: 特定のリンクアイコンを削除する
      description: プロジェクトのリンクアイコンリストから指定されたリンクアイコンを削除します。
      parameters:
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: プロジェクトのID
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: 削除するリンクアイコンのUUID
      responses:
        '200':
          description: リンクアイコンを正常に削除しました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: リンクアイコンを正常に削除しました。
                  data:
                    $ref: '#/components/schemas/LinkIcon'
        '404':
          description: 指定された projectId または uuid のリンクアイコンが見つかりません。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 指定された uuid のリンクアイコンが見つかりません。
        '500':
          description: サーバー内部エラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: エラーメッセージの詳細
    post:
      tags:
        - LinkIcon
      summary: リンクアイコンの作成
      description: リンクアイコンを新規作成し保存する
      operationId: createLinkIcon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: string
                  description: The project ID to which these link icons belong.
                  example: 'DVLG'
                linkIconList:
                  type: array
                  description: List of link icons.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: Name of the link icon.
                        example: 'GitHub'
                      url:
                        type: string
                        description: URL linked to the icon.
                        example: 'https://github.com'
                      iconType:
                        type: string
                        description: Type of the icon.
                        example: 'github'
      responses:
        '201':
          description: Successfully created a new link icon entry.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Link icon entry created successfully.'
                  data:
                    $ref: '#/components/schemas/LinkIcon'
        '400':
          description: Invalid input data.
        '500':
          description: Internal server error.

  #チケットの新規作成
  /tickets:
    post:
      tags: ['Ticket']
      summary: タスクチケットの新規作成
      description: チケットを新規作成する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
              $ref: '#/components/schemas/TicketCreateRequest'
      responses:
        '200':
          description: 'チケット作成成功時'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
    # チケット全件取得
    get:
      tags: ['Ticket']
      summary: チケット一覧の取得
      description: projectIdに紐づくチケットを取得
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
          description: The project ID to retrieve tickets for.
      responses:
        '200':
          description: Successfully retrieved the tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '404':
          description: No tickets found for the specified project ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 'チケットが取得できませんでした'
  /tickets/{ticketId}:
    get:
      tags: ['Ticket']
      summary: ticketIdからチケットの詳細を取得する
      description: ticketIdからチケットの詳細を取得する
      parameters:
        - name: ticketId
          in: path
          required: true
          description: チケットId
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: チケットIdが無効です
        '500':
          description: Internal server error
    put:
      tags: ['Ticket']
      summary: チケットの更新
      description: ticketIdからチケットを更新する
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: string
          description: チケットId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdateRequest'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: チケットIdが無効です
        '500':
          description: Internal server error
    delete:
      tags: ['Ticket']
      summary: チケットの削除
      description: ticketIdからチケットを削除する
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: string
          description: チケットId
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: チケットIdが無効です
        '500':
          description: Internal server error
  /tickets/category/{projectId}:
    get:
      summary: カテゴリ一覧の取得
      tags: ['Ticket']
      description: プロジェクトIdを元にカテゴリ一覧を取得
      operationId: getCategories
      parameters:
        - name: projectId
          in: path
          required: true
          description: projectId
          schema:
            type: string
      responses:
        '200':
          description: カテゴリ一覧が正常に取得されました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketCategories'
        '400':
          description: プロジェクトIDが提供されていない場合のエラーレスポンス
        '404':
          description: 指定されたプロジェクトIDに関連するカテゴリが見つからない場合のエラーレスポンス
        '500':
          description: サーバー内部エラー
    post:
      summary: カテゴリの配列を受け取り、データベースに保存
      tags: ['Ticket']
      description: 画面から設定される一意のカテゴリを配列形式で受け取り、データベースに保存します。
      operationId: createCategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
              $ref: '#/components/schemas/TicketCategories'
      responses:
        '201':
          description: カテゴリが正常に作成されました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: 不正なリクエストデータ。
        '500':
          description: サーバーエラー。

  /note/{projectId}:
    get:
      tags: ['Note']
      summary: プロジェクト内のすべてのノートを取得
      description: 指定されたプロジェクトIDに紐づくすべてのノートを取得します。
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ノートが属するプロジェクトのID。
      responses:
        '200':
          description: 正常にノートが取得されました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '404':
          description: 指定されたプロジェクトIDにノートが存在しません。
        '500':
          description: サーバーエラーが発生しました。
  /note/{projectId}/{uuid}:
    get:
      tags: ['Note']
      summary: 特定のノートを取得
      description: 指定されたプロジェクトIDとUuidに一致するノートを取得します。
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ノートが属するプロジェクトのID。
        - in: path
          name: uuid
          required: true
          schema:
            type: string
          description: uuid
      responses:
        '200':
          description: 正常にノートが取得されました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: 指定されたノートが見つかりません。
        '500':
          description: サーバーエラーが発生しました。
    delete:
      tags: ['Note']
      summary: '指定されたUUIDのノートを削除'
      description: '指定されたプロジェクトIDとUUIDに基づいてノートを削除します。'
      parameters:
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: 'プロジェクトID'
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: 'ノートのUUID'
      responses:
        '200':
          description: 'ノートが正常に削除されました'
  /note/create/{projectId}:
    post:
      tags: ['Note']
      summary: 新規ノートの作成
      description: 指定されたプロジェクトに対して新しいノートを作成します。
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ノートが属するプロジェクトのID。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: ノート作成者のユニーク識別子。
                  example: '123e4567-e89b-12d3-a456-426614174000'
                icon:
                  type: string
                  description: ノートに関連するアイコン。
                  example: 'note'
                title:
                  type: string
                  description: ノートのタイトル。
                  example: '私の最初のノート'
                body:
                  type: string
                  description: ノートの本文。
                  example: 'これはノートの本文です。'
      responses:
        '201':
          description: ノートが正常に作成されました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          description: 入力が無効です。
        '500':
          description: サーバーエラーが発生しました。
  /note/update/{projectId}:
    put:
      tags: ['Note']
      summary: 既存のノートの更新
      description: 指定されたプロジェクトのノートを更新します。
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ノートが属するプロジェクトのID。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: ノート作成者のユニーク識別子。
                  example: '123e4567-e89b-12d3-a456-426614174000'
                icon:
                  type: string
                  description: ノートに関連するアイコン。
                  example: 'note'
                title:
                  type: string
                  description: ノートのタイトル。
                  example: '更新されたノートのタイトル'
                body:
                  type: string
                  description: ノートの更新された本文。
                  example: 'これは更新されたノートの本文です。'
      responses:
        '200':
          description: ノートが正常に更新されました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: 指定されたノートが見つかりません。
        '500':
          description: サーバーエラーが発生しました。

components:
  schemas:
    # ユーザー
    User:
      type: object
      required:
        - userName
        - email
        - passwordHash
      properties:
        _id:
          type: string
          format: uuid
          description: ユーザーの一意識別子
          readOnly: true
        userId:
          type: string
          format: uuid
          description: ユーザーの一意識別子（_idと同一）
          readOnly: true
        userName:
          type: string
          description: ユーザーのユーザーネーム
        email:
          type: string
          format: email
          description: ユーザーのメールアドレス
        passwordHash:
          type: string
          description: ユーザーのハッシュ化されたパスワード
        createdAt:
          type: string
          format: date-time
          description: ユーザー作成のタイムスタンプ
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: 最後の更新のタイムスタンプ
          readOnly: true
        lastLogin:
          type: string
          format: date-time
          description: 最後のログインのタイムスタンプ
          readOnly: true
    # プロジェクト
    Project:
      type: object
      properties:
        _id:
          type: string
          description: プロジェクトのユニークなID
        projectId:
          type: string
        userId:
          type: string
        name:
          type: string
          description: プロジェクト名
        detail:
          type: string
          description: プロジェクト詳細
        limitDate:
          type: string
          description: プロジェクトの期限日
    # チケット
    Ticket:
      type: object
      required:
        - _id
        - projectId
        - ticketId
        - detail
        - labelColorType
        - title
        - isDeletable
        - priority
        - status
      properties:
        _id:
          type: number
        projectId:
          type: string
        ticketId:
          type: string
        labelColorType:
          type: string
          enum:
            - white
            - lightBlue
            - blue
            - red
        title:
          type: string
        detail:
          type: string
        isDeletable:
          type: boolean
        limitStartYm:
          type: string
          format: date
          nullable: true
        limitEndYm:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        status:
          type: string
          enum:
            - notStarted
            - underConstruction
            - completed
    TicketCategories:
      type: object
      required:
        - projectId
        - categories
      properties:
        projectId:
          type: string
          description: プロジェクトの一意識別子。
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      required:
        - uuid
        - name
      properties:
        uuid:
          type: string
          description: カテゴリの一意識別子。
        name:
          type: string
          description: カテゴリ名。
    TicketCreateRequest:
      type: object
      required:
        - projectId
        - detail
        - labelColorType
        - title
        - isDeletable
        - priority
        - status
      properties:
        projectId:
          type: string
        labelColorType:
          type: string
          enum:
            - white
            - lightBlue
            - blue
            - red
        title:
          type: string
        detail:
          type: string
        isDeletable:
          type: boolean
        limitStartYm:
          type: string
          format: date
          nullable: true
        limitEndYm:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        status:
          type: string
          enum:
            - notStarted
            - underConstruction
            - completed

    TicketUpdateRequest:
      type: object
      required:
        - projectId
        - detail
        - labelColorType
        - title
        - isDeletable
        - priority
        - status
      properties:
        projectId:
          type: string
        labelColorType:
          type: string
          enum:
            - white
            - lightBlue
            - blue
        title:
          type: string
        detail:
          type: string
        isDeletable:
          type: boolean
        limitStartYm:
          type: string
          format: date
          nullable: true
        limitEndYm:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        status:
          type: string
          enum:
            - notStarted
            - underConstruction
            - completed
    LinkIcon:
      type: object
      properties:
        projectId:
          type: string
          description: The project ID to which these link icons belong.
        linkIconList:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              url:
                type: string
              iconType:
                type: string

    Note:
      type: object
      properties:
        projectId:
          type: string
          description: ノートが属するプロジェクトのID。
        uuid:
          type: string
          description: ノート作成者のユニーク識別子。
        icon:
          type: string
          description: ノートに関連するアイコン。
        title:
          type: string
          description: ノートのタイトル。
        createdAt:
          type: string
          format: date-time
          description: ノートが作成された日時。
        updatedAt:
          type: string
          format: date-time
          description: ノートが最後に更新された日時。
        body:
          type: string
          description: ノートの本文。

  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
